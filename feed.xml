<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LYC4N.IO</title>
    <description>My dev blog and stuffs :]</description>
    <link>https://lyc4n.github.io/</link>
    <atom:link href="https://lyc4n.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 20 Sep 2019 23:25:03 +0800</pubDate>
    <lastBuildDate>Fri, 20 Sep 2019 23:25:03 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>See your databases' big picture</title>
        <description>&lt;p&gt;Whenever I get into a new or got back to an old Rails project that I have
worked with sometime ago I try to get the big picture of the system first.
The way I do this is through the use of the
&lt;a href=&quot;https://github.com/voormedia/rails-erd&quot;&gt;rails-erd&lt;/a&gt; gem.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/voormedia/rails-erd&quot;&gt;rails-erd&lt;/a&gt; creates an Entity
Relationship Diagram formatted as a pdf based from your project’s models and their relationships
therefore making it easier for us to see the overall view of the system from
the database side.&lt;/p&gt;

</description>
        <pubDate>Sun, 28 Jan 2018 00:00:00 +0800</pubDate>
        <link>https://lyc4n.github.io/2018/01/28/see-your-databases'-big-picture/</link>
        <guid isPermaLink="true">https://lyc4n.github.io/2018/01/28/see-your-databases'-big-picture/</guid>
        
        <category>rails</category>
        
        <category>database</category>
        
        
      </item>
    
      <item>
        <title>OpenStruct and ActiveRecord Combo</title>
        <description>&lt;p&gt;&lt;strong&gt;What is OpenStruct?&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An OpenStruct is a data structure, similar to a Hash, that allows the definition of arbitrary attributes with their  &lt;br /&gt;
accompanying values. This is accomplished by using Ruby’s metaprogramming to define methods on the class itself.
— from &lt;a href=&quot;http://ruby-doc.org/stdlib-2.0.0/libdoc/ostruct/rdoc/OpenStruct.html&quot;&gt;ruby-doc&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is it’s basic usage&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ostruct'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OpenStruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Snoop'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;age&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 'Snoop'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;age&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# =&amp;gt;  1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also inherit from it&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ostruct'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OpenStruct&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Brownie'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;age: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 'Snoop'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;age&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# =&amp;gt;  2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Rails ActiveRecord&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You probably know what is &lt;a href=&quot;http://guides.rubyonrails.org/active_record_basics.html#what-is-active-record-questionmark&quot;&gt;Rails ActiveRecord&lt;/a&gt; so we will move to the interesting part which is querying using raw sql statements. Yes, ActiveRecord provides &lt;code class=&quot;highlighter-rouge&quot;&gt;find_by_sql&lt;/code&gt; but something deeper lies the &lt;code class=&quot;highlighter-rouge&quot;&gt;exec_query&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;exec_query&lt;/code&gt; is a method you can call on ActiveRecord’s connection adapter:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ConnectionAdapters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Mysql2Adapter&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, the ActiveRecord::Base.connection returns an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord::ConnectionAdapters::Mysql2Adapter&lt;/code&gt; and it can change depending on what database you will be using. That adapter has the &lt;code class=&quot;highlighter-rouge&quot;&gt;exec_query&lt;/code&gt; method which can be used to perform raw queries like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exec_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Select * from users limit 2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; ActiveRecord::Result&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ancestors&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# [... Enumerable ...]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exec_query&lt;/code&gt; takes in the query which is a string then returns an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord::Result&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord::Result&lt;/code&gt; inherits from a number of classes and modules including the &lt;code class=&quot;highlighter-rouge&quot;&gt;Enumerable&lt;/code&gt; module which means it behaves like an array and enumerates row results which are represented by Hash.&lt;/p&gt;

&lt;p&gt;Here we print out each of the hash contained in the result&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exec_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Select id, name from users limit 2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; {'id'=&amp;gt;1, 'name'=&amp;gt;'user1'}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; {'id'=&amp;gt;2, 'name'=&amp;gt;&quot;user2'}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Finally, the combo&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonnelSalesReport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OpenStruct&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;initialize_collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;attributes_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
       &lt;span class=&quot;no&quot;&gt;PersonnelSalesReport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
   
   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
   
   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonnelSalesReportsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build_complex_query&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exec_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Select * from users limit 2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;vi&quot;&gt;@personnel_sales_report&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PersonnelSalesReport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;initialize_collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 31 Oct 2017 00:00:00 +0800</pubDate>
        <link>https://lyc4n.github.io/2017/10/31/openstruct-and-activerecord/</link>
        <guid isPermaLink="true">https://lyc4n.github.io/2017/10/31/openstruct-and-activerecord/</guid>
        
        <category>ruby</category>
        
        <category>activerecord</category>
        
        <category>techniques</category>
        
        
      </item>
    
      <item>
        <title>Needle in the haystack</title>
        <description>&lt;p&gt;Catchy article title huh? I won’t be discussing how I found needles on the haystack but
something that developers and other workers encounter every once in a while
which is a somehow comparable to the needle in the haystack.&lt;/p&gt;

&lt;p&gt;Simple scenario is that you’ve got two files with almost identical contents.
That probably is code, json data, xml data and the likes. Now you want to know
that difference between those files. You could easily solve this by using a
text diff finder online or using built in commands available in your machine
such as diff. Those stuff works but there’ll be times when their results aren’t
that easy to understand and will take some time off you before you realize the
difference between the file. A trick you can use is simply load those two files
in your editor in different tabs and switch between the tabs. You’ll easily
notice the part of that file that made the difference without a sweat!&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Aug 2017 00:00:00 +0800</pubDate>
        <link>https://lyc4n.github.io/2017/08/16/needle-in-the-haystack/</link>
        <guid isPermaLink="true">https://lyc4n.github.io/2017/08/16/needle-in-the-haystack/</guid>
        
        
      </item>
    
      <item>
        <title>Opinion: Why Ruby &gt; Python</title>
        <description>&lt;p&gt;Last month I got the chance to play with Python and some of the major
frameworks built with it. In the process I learned why Ruby is greater than
Python.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Ruby is much more Programmer friendly than Python:&lt;/li&gt;
  &lt;li&gt;4 lines of indentation is simply too much&lt;/li&gt;
  &lt;li&gt;Ruby tools are more modern than Python tools&lt;/li&gt;
  &lt;li&gt;Main web development framework Rails has larger community compared to Django&lt;/li&gt;
  &lt;li&gt;Python devs are divided between new and old versions&lt;/li&gt;
  &lt;li&gt;Unlike Ruby you have to explicitly add () when calling a method&lt;/li&gt;
  &lt;li&gt;Ruby is more object oriented than Python&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;PS: This of course is a biased opinion coming from someone who have done Ruby
programming for a few years and a few weeks of Python programming. There are surely
reasons why Python &amp;gt; Ruby but I’m not leaning towards that topic.&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Aug 2017 00:00:00 +0800</pubDate>
        <link>https://lyc4n.github.io/2017/08/05/why-ruby-python/</link>
        <guid isPermaLink="true">https://lyc4n.github.io/2017/08/05/why-ruby-python/</guid>
        
        
      </item>
    
      <item>
        <title>Clearing unecessary files with git</title>
        <description>&lt;p&gt;Have you ever been on a situation when there are some unecessary untracked
files on your repository? Probably yes. It would be easy to just perform an &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt;
to delete a single untracked file  or &lt;code class=&quot;highlighter-rouge&quot;&gt;rm -rf ./unwanted_dir&lt;/code&gt; to remove a directory plus it’s content.
However, this could take time when there are a lot that needs to be remove.&lt;/p&gt;

&lt;p&gt;That’s where &lt;code class=&quot;highlighter-rouge&quot;&gt;git clean&lt;/code&gt; comes in handy. By default it would remove only the
untracked the files. Passing it the &lt;strong&gt;-d&lt;/strong&gt; flag also removes the untracked the
directory. Another useful flag is the &lt;strong&gt;-i&lt;/strong&gt; which lets you enter in an
interactive clean prompt which will let you confirm removal of the
files/directories:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clean &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, save some time by using &lt;a href=&quot;https://git-scm.com/docs/git-clean&quot;&gt;git clean&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Aug 2017 00:00:00 +0800</pubDate>
        <link>https://lyc4n.github.io/2017/08/05/til-clearing-unecessary-files-with-git/</link>
        <guid isPermaLink="true">https://lyc4n.github.io/2017/08/05/til-clearing-unecessary-files-with-git/</guid>
        
        
      </item>
    
      <item>
        <title>TIL: Using backticks in Ruby</title>
        <description>&lt;p&gt;So I was looking for a way to display the revision hash of a rails app
repository and found this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AppName&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;REVISION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`git log --pretty=format:'%h' -n 1`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above code makes use of &lt;strong&gt;backticks&lt;/strong&gt; which lets us &lt;strong&gt;execute code into the
shell&lt;/strong&gt; and return it’s result so that we can store it into a variable that we
can use in the app to display the hash of the latest revision.&lt;/p&gt;

&lt;p&gt;While playing with the backicks I noticed that you can also do string
interpolation with it but you probably don’t want to do it unless you surely
know what you are doing because just like the &lt;em&gt;eval&lt;/em&gt; method it could also lead
to execution of unwanted codes.&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Jul 2017 00:00:00 +0800</pubDate>
        <link>https://lyc4n.github.io/2017/07/23/til-using-backticks-in-ruby/</link>
        <guid isPermaLink="true">https://lyc4n.github.io/2017/07/23/til-using-backticks-in-ruby/</guid>
        
        
      </item>
    
      <item>
        <title>TIL: Retry in Ruby</title>
        <description>&lt;p&gt;I was working with an api and encountered a situation where the api server tend to raise some unexpected error.
The case seems to be inevitable when working with api. So I thought maybe there is a way in ruby to handle those times
wherein we prefer to perform the operation once again whenever we hit a specific error.&lt;/p&gt;

&lt;p&gt;Here Ruby’s &lt;code class=&quot;highlighter-rouge&quot;&gt;retry&lt;/code&gt; function will come in handy. It can be called within a rescue block in order to
perform the rescued block again.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetch_api_records&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SomeApiTimeoutError&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;retry&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This however could possibly result to a never ending retry.&lt;/p&gt;

&lt;p&gt;We can improve this by adding a limit to the number of tries:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetch_api_records&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SomeApiTimeoutError&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# @fetch_api_retry_counter should be set probably in the class initializer&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;retry&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@fetch_api_retry_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 20 Jun 2017 00:00:00 +0800</pubDate>
        <link>https://lyc4n.github.io/2017/06/20/til-retry-in-ruby/</link>
        <guid isPermaLink="true">https://lyc4n.github.io/2017/06/20/til-retry-in-ruby/</guid>
        
        
      </item>
    
      <item>
        <title>Ask for help from brew</title>
        <description>&lt;p&gt;I use OS X when developing application at work. In OS X homebrew is popular.&lt;/p&gt;

&lt;p&gt;What is homebrew?&lt;/p&gt;

&lt;p&gt;Wikipedia defines it as: &lt;em&gt;a free and open-source software package management system that simplifies
the installation of software on Apple’s macOS operating system. Originally written by Max Howell,
the package manager has gained popularity in the Ruby on Rails community and earned praise for
its extensibility.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can install a package in homebrew via brew install command&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Today I learned that brew has an info command:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew info package-name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you might guess this outputs some valuable information about the specified package you pass in the command.
Say you forgot how to run redis server on your machine and you previously didn’t take note on how to do it
then just ask brew about it because sometimes google is not necessary:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew info redis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will get a result like this which informs you where the package came from
and more importantly it gives information on how to run it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  redis: stable 3.2.9 (bottled), devel 4.0RC3, HEAD
  Persistent key-value database, with built-in net interface
  https://redis.io/
  /usr/local/Cellar/redis/3.2.8 (11 files, 1.7MB) *
    Poured from bottle on 2017-05-08 at 16:39:05
  From: https://github.com/Homebrew/homebrew-core/blob/master/Formula/redis.rb
  ==&amp;gt; Options
  --with-jemalloc
    Select jemalloc as memory allocator when building Redis
  --devel
    Install development version 4.0RC3
  --HEAD
    Install HEAD version
  ==&amp;gt; Caveats
  To have launchd start redis now and restart at login:
    brew services start redis
  Or, if you don't want/need a background service you can just run:
    redis-server /usr/local/etc/redis.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now take a cup of brewed :coffee:&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Jun 2017 00:00:00 +0800</pubDate>
        <link>https://lyc4n.github.io/2017/06/15/ask-for-help-from-brew/</link>
        <guid isPermaLink="true">https://lyc4n.github.io/2017/06/15/ask-for-help-from-brew/</guid>
        
        
      </item>
    
      <item>
        <title>What blogs do I read?</title>
        <description>&lt;p&gt;A coleague (a younger dev) asks me what blogs do I read. I thought I’d answer
with a blog post of my own and here it is. :facepunch:&lt;/p&gt;

&lt;p&gt;I don’t really have a set of tech blogs that I read on a daily basis. What I do
is I subscribe on newsletters of weekly currated blog post and try do devote a
time within the week where I browse them and take a look at those that
interests me. That said, here are the newsletters that I am subscribed right
now:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://wdrl.info/&quot;&gt;Web Development Reading List&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://javascriptweekly.com/&quot;&gt;JavaScript Weekly&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://rubyweekly.com/&quot;&gt;Ruby Weekly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Aside from those, twitter also helps. Lots of open source contributors are
active on it so I check twitter once in a while!&lt;/p&gt;

&lt;p&gt;Oh, another thing. Aside from blogs, podcasts are also helpful. I remember I used to
listen to &lt;a href=&quot;https://devchat.tv/ruby-rogues&quot;&gt;Ruby Rogues&lt;/a&gt; and &lt;a href=&quot;http://giantrobots.fm/&quot;&gt;Giant Robots&lt;/a&gt;
podcasts though I haven’t been lately.&lt;/p&gt;

&lt;p&gt;Thanks to the people behind those newsletter for keeping us well informed.
If you’re generous enough please buy them :beers:! That it, subscribe to those things above if you haven’t yet. :smile:&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Apr 2017 00:00:00 +0800</pubDate>
        <link>https://lyc4n.github.io/2017/04/14/what-blogs-do-i-read/</link>
        <guid isPermaLink="true">https://lyc4n.github.io/2017/04/14/what-blogs-do-i-read/</guid>
        
        
      </item>
    
      <item>
        <title>Vim: search text within directories</title>
        <description>&lt;p&gt;Every developer needs a good way to search a text within a directory. And for a some time now I have been using and has been satisfied with something like:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;find ./config/  &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; f  | xargs &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;8080&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--color&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which I run from the terminal (outside of vim)&lt;/p&gt;

&lt;p&gt;It works but then it can be better. So I looked for another option and found
&lt;strong&gt;Ack&lt;/strong&gt;. It is said to be &lt;em&gt;designed as an alternative to grep for programmers&lt;/em&gt;
according to its man page.&lt;/p&gt;

&lt;p&gt;From the terminal you can use it as follows:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ack &lt;span class=&quot;nt&quot;&gt;--html&lt;/span&gt; site-menu-container  ./_site/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which will find the text &lt;strong&gt;site-menu-container&lt;/strong&gt; on all html files within the
./_site directory.&lt;/p&gt;

&lt;p&gt;Note that the directory and the filetype options are optional.
But this wont work well with vim right out of the box. Thankfully, there
already has been a vim plugin for this which is &lt;strong&gt;mileszs/ack.vim&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So install that plugin and you will be able to run ack within vim like this:&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;Ack &lt;span class=&quot;p&quot;&gt;--&lt;/span&gt;html site&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;menu&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;container  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/_site/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Results will be shown on vim’s quickfix window.
And yes, that is capital letter A when running ack within vim.&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Apr 2017 00:00:00 +0800</pubDate>
        <link>https://lyc4n.github.io/2017/04/07/vim-search-text-within-directories/</link>
        <guid isPermaLink="true">https://lyc4n.github.io/2017/04/07/vim-search-text-within-directories/</guid>
        
        <category>vim</category>
        
        
      </item>
    
  </channel>
</rss>
